
AVRASM ver. 2.1.30  D:\Programming\twiTest\Soft\Slave\Debug\List\twiSlave.asm Sat Mar 09 15:12:46 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : long, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c023      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 c29a      	RJMP _twi_int_handler
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 _0x0:
000014 6425
000015 2500
000016 2064
000017 6425      	.DB  0x25,0x64,0x0,0x25,0x64,0x20,0x25,0x64
000018 2520
000019 0064
00001a 6c25
00001b 0064      	.DB  0x20,0x25,0x64,0x0,0x25,0x6C,0x64,0x0
                 _0x2020003:
D:\Programming\twiTest\Soft\Slave\Debug\List\twiSlave.asm(1120): warning: .cseg .db misalignment - padding zero byte
00001c 0007      	.DB  0x7
                 
                 __GLOBAL_INI_TBL:
00001d 0001      	.DW  0x01
00001e 0002      	.DW  0x02
00001f 0026      	.DW  __REG_BIT_VARS*2
                 
000020 0001      	.DW  0x01
000021 0162      	.DW  _twi_result
000022 0038      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000023 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000024 94f8      	CLI
000025 27ee      	CLR  R30
000026 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000027 e0f1      	LDI  R31,1
000028 bffb      	OUT  GICR,R31
000029 bfeb      	OUT  GICR,R30
00002a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002b e08d      	LDI  R24,(14-2)+1
00002c e0a2      	LDI  R26,2
00002d 27bb      	CLR  R27
                 __CLEAR_REG:
00002e 93ed      	ST   X+,R30
00002f 958a      	DEC  R24
000030 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000031 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000032 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000033 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000034 93ed      	ST   X+,R30
000035 9701      	SBIW R24,1
000036 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000037 e3ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000038 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000039 9185      	LPM  R24,Z+
00003a 9195      	LPM  R25,Z+
00003b 9700      	SBIW R24,0
00003c f061      	BREQ __GLOBAL_INI_END
00003d 91a5      	LPM  R26,Z+
00003e 91b5      	LPM  R27,Z+
00003f 9005      	LPM  R0,Z+
000040 9015      	LPM  R1,Z+
000041 01bf      	MOVW R22,R30
000042 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000043 9005      	LPM  R0,Z+
000044 920d      	ST   X+,R0
000045 9701      	SBIW R24,1
000046 f7e1      	BRNE __GLOBAL_INI_LOOP
000047 01fb      	MOVW R30,R22
000048 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000049 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004a bfed      	OUT  SPL,R30
00004b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004f c01e      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;// Declare your global variables here
                 ;
                 ;// TWI functions
                 ;#include <twi.h>
                 ;#include <delay.h>
                 ;
                 ;// TWI Slave receive buffer
                 ;#define TWI_RX_BUFFER_SIZE 8
                 ;unsigned char twi_rx_buffer[TWI_RX_BUFFER_SIZE];
                 ;
                 ;// TWI Slave transmit buffer
                 ;#define TWI_TX_BUFFER_SIZE 1
                 ;unsigned char twi_tx_buffer[TWI_TX_BUFFER_SIZE];
                 ;
                 ;// TWI Slave receive handler
                 ;// This handler is called everytime a byte
                 ;// is received by the TWI slave
                 ;
                 ;bit flag = 0;
                 ;bool twi_rx_handler(bool rx_complete)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _twi_rx_handler:
                 ; .FSTART _twi_rx_handler
                 ; 0000 0018 if (twi_result==TWI_RES_OK)
000050 93aa      	ST   -Y,R26
                 ;	rx_complete -> Y+0
000051 91e0 0162 	LDS  R30,_twi_result
000053 30e0      	CPI  R30,0
000054 f419      	BRNE _0x3
                 ; 0000 0019    {
                 ; 0000 001A    // A data byte was received without error
                 ; 0000 001B    // and it was stored at twi_rx_buffer[twi_rx_index]
                 ; 0000 001C    // Place your code here to process the received byte
                 ; 0000 001D    // Note: processing must be VERY FAST, otherwise
                 ; 0000 001E    // it is better to process the received data when
                 ; 0000 001F    // all communication with the master has finished
                 ; 0000 0020    flag = 1;
000055 9468      	SET
000056 f820      	BLD  R2,0
                 ; 0000 0021    }
                 ; 0000 0022 else
000057 c004      	RJMP _0x4
                 _0x3:
                 ; 0000 0023    {
                 ; 0000 0024    // Receive error
                 ; 0000 0025    // Place your code here to process the error
                 ; 0000 0026    flag = 0;
000058 94e8      	CLT
000059 f820      	BLD  R2,0
                 ; 0000 0027 
                 ; 0000 0028    return false; // Stop further reception
00005a e0e0      	LDI  R30,LOW(0)
00005b c06f      	RJMP _0x2080001
                 ; 0000 0029    }
                 _0x4:
                 ; 0000 002A 
                 ; 0000 002B // The TWI master has finished transmitting data?
                 ; 0000 002C if (rx_complete) return false; // Yes, no more bytes to receive
00005c 81e8      	LD   R30,Y
00005d 30e0      	CPI  R30,0
00005e f011      	BREQ _0x5
00005f e0e0      	LDI  R30,LOW(0)
000060 c06a      	RJMP _0x2080001
                 ; 0000 002D 
                 ; 0000 002E // Signal to the TWI master that the TWI slave
                 ; 0000 002F // is ready to accept more data, as long as
                 ; 0000 0030 // there is enough space in the receive buffer
                 ; 0000 0031 return (twi_rx_index<2);
                 _0x5:
000061 91a0 0161 	LDS  R26,_twi_rx_index
000063 e0e2      	LDI  R30,LOW(2)
000064 d431      	RCALL __LTB12U
000065 c065      	RJMP _0x2080001
                 ; 0000 0032 }
                 ; .FEND
                 ;
                 ;// TWI Slave transmission handler
                 ;// This handler is called for the first time when the
                 ;// transmission from the TWI slave to the master
                 ;// is about to begin, returning the number of bytes
                 ;// that need to be transmitted
                 ;// The second time the handler is called when the
                 ;// transmission has finished
                 ;// In this case it must return 0
                 ;unsigned char twi_tx_handler(bool tx_complete)
                 ; 0000 003D {
                 _twi_tx_handler:
                 ; .FSTART _twi_tx_handler
                 ; 0000 003E if (tx_complete==false)
000066 93aa      	ST   -Y,R26
                 ;	tx_complete -> Y+0
000067 81e8      	LD   R30,Y
000068 30e0      	CPI  R30,0
000069 f411      	BRNE _0x6
                 ; 0000 003F    {
                 ; 0000 0040    // Transmission from slave to master is about to start
                 ; 0000 0041    // Return the number of bytes to transmit
                 ; 0000 0042    return sizeof(twi_tx_buffer);
00006a e0e1      	LDI  R30,LOW(1)
00006b c05f      	RJMP _0x2080001
                 ; 0000 0043    }
                 ; 0000 0044 
                 ; 0000 0045 // Transmission from slave to master has finished
                 ; 0000 0046 // Place code here to eventually process data from
                 ; 0000 0047 // the twi_rx_buffer, if it wasn't yet processed
                 ; 0000 0048 // in the twi_rx_handler
                 ; 0000 0049 
                 ; 0000 004A // No more bytes to send in this transaction
                 ; 0000 004B return 0;
                 _0x6:
00006c e0e0      	LDI  R30,LOW(0)
00006d c05d      	RJMP _0x2080001
                 ; 0000 004C }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0050 
                 ; 0000 0051 long result = 0;
                 ; 0000 0052 
                 ; 0000 0053 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00006e 9724      	SBIW R28,4
00006f e0e0      	LDI  R30,LOW(0)
000070 83e8      	ST   Y,R30
000071 83e9      	STD  Y+1,R30
000072 83ea      	STD  Y+2,R30
000073 83eb      	STD  Y+3,R30
                 ;	result -> Y+0
000074 b9eb      	OUT  0xB,R30
                 ; 0000 0054 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000075 e0e8      	LDI  R30,LOW(8)
000076 b9ea      	OUT  0xA,R30
                 ; 0000 0055 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000077 e8e6      	LDI  R30,LOW(134)
000078 bde0      	OUT  0x20,R30
                 ; 0000 0056 UBRRH=0x00;
000079 e0e0      	LDI  R30,LOW(0)
00007a bde0      	OUT  0x20,R30
                 ; 0000 0057 UBRRL=0x33;
00007b e3e3      	LDI  R30,LOW(51)
00007c b9e9      	OUT  0x9,R30
                 ; 0000 0058 
                 ; 0000 0059 // TWI initialization
                 ; 0000 005A // Mode: TWI Slave
                 ; 0000 005B // Match Any Slave Address: Off
                 ; 0000 005C // I2C Bus Slave Address: 0x01
                 ; 0000 005D twi_slave_init(false,0x01,twi_rx_buffer,2,twi_tx_buffer,twi_rx_handler,twi_tx_handler);
00007d e0e0      	LDI  R30,LOW(0)
00007e 93ea      	ST   -Y,R30
00007f e0e1      	LDI  R30,LOW(1)
000080 93ea      	ST   -Y,R30
000081 e6e3      	LDI  R30,LOW(_twi_rx_buffer)
000082 e0f1      	LDI  R31,HIGH(_twi_rx_buffer)
000083 d3a2      	RCALL SUBOPT_0x0
000084 e0e2      	LDI  R30,LOW(2)
000085 93ea      	ST   -Y,R30
000086 e6eb      	LDI  R30,LOW(_twi_tx_buffer)
000087 e0f1      	LDI  R31,HIGH(_twi_tx_buffer)
000088 d39d      	RCALL SUBOPT_0x0
000089 e5e0      	LDI  R30,LOW(_twi_rx_handler)
00008a e0f0      	LDI  R31,HIGH(_twi_rx_handler)
00008b d39a      	RCALL SUBOPT_0x0
00008c e6a6      	LDI  R26,LOW(_twi_tx_handler)
00008d e0b0      	LDI  R27,HIGH(_twi_tx_handler)
00008e d1ec      	RCALL _twi_slave_init
                 ; 0000 005E 
                 ; 0000 005F delay_ms(2000);
00008f eda0      	LDI  R26,LOW(2000)
000090 e0b7      	LDI  R27,HIGH(2000)
000091 d3e4      	RCALL _delay_ms
                 ; 0000 0060 
                 ; 0000 0061 // Global enable interrupts
                 ; 0000 0062 #asm("sei")
000092 9478      	sei
                 ; 0000 0063 
                 ; 0000 0064 delay_ms(10000);
000093 e1a0      	LDI  R26,LOW(10000)
000094 e2b7      	LDI  R27,HIGH(10000)
000095 d3e0      	RCALL _delay_ms
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 printf("%d", flag);
                +
000096 e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000097 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000098 d38d      	RCALL SUBOPT_0x0
000099 e0e0      	LDI  R30,0
00009a fc20      	SBRC R2,0
00009b e0e1      	LDI  R30,1
00009c d38c      	RCALL SUBOPT_0x1
00009d d38f      	RCALL SUBOPT_0x2
                 ; 0000 0068 result = (unsigned int)(twi_rx_buffer[0] << 8);
00009e 91f0 0163 	LDS  R31,_twi_rx_buffer
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 2766      	CLR  R22
0000a2 2777      	CLR  R23
0000a3 d38e      	RCALL SUBOPT_0x3
                 ; 0000 0069 result |= twi_rx_buffer[1];
                +
0000a4 91e0 0164+LDS R30 , _twi_rx_buffer + ( 1 )
                 	__GETB1MN _twi_rx_buffer,1
0000a6 d427      	RCALL __GETD2S0
0000a7 d381      	RCALL SUBOPT_0x1
0000a8 d3db      	RCALL __ORD12
0000a9 d388      	RCALL SUBOPT_0x3
                 ; 0000 006A 
                 ; 0000 006B printf("%d %d %d", twi_rx_index, sizeof(twi_rx_buffer), TWCR);
                +
0000aa e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 3 ) )
0000ab e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 3 ) )
                 	__POINTW1FN _0x0,3
0000ac d379      	RCALL SUBOPT_0x0
0000ad 91e0 0161 	LDS  R30,_twi_rx_index
0000af d379      	RCALL SUBOPT_0x1
0000b0 d427      	RCALL __PUTPARD1
                +
0000b1 e0e8     +LDI R30 , LOW ( 0x8 )
0000b2 e0f0     +LDI R31 , HIGH ( 0x8 )
0000b3 e060     +LDI R22 , BYTE3 ( 0x8 )
0000b4 e070     +LDI R23 , BYTE4 ( 0x8 )
                 	__GETD1N 0x8
0000b5 d422      	RCALL __PUTPARD1
0000b6 b7e6      	IN   R30,0x36
0000b7 d371      	RCALL SUBOPT_0x1
0000b8 d41f      	RCALL __PUTPARD1
0000b9 e08c      	LDI  R24,12
0000ba d1a2      	RCALL _printf
0000bb 962e      	ADIW R28,14
                 ; 0000 006C printf("%ld", result);
                +
0000bc e3e4     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0000bd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0000be d367      	RCALL SUBOPT_0x0
                +
0000bf 81ea     +LDD R30 , Y + 2
0000c0 81fb     +LDD R31 , Y + 2 + 1
0000c1 816c     +LDD R22 , Y + 2 + 2
0000c2 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0000c3 d369      	RCALL SUBOPT_0x2
                 ; 0000 006D 
                 ; 0000 006E 
                 ; 0000 006F while (1)
                 _0x7:
                 ; 0000 0070       {
                 ; 0000 0071       // Place your code here
                 ; 0000 0072 
                 ; 0000 0073       }
0000c4 cfff      	RJMP _0x7
                 ; 0000 0074 }
                 _0xA:
0000c5 cfff      	RJMP _0xA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0000c6 93aa      	ST   -Y,R26
                 putchar0:
0000c7 9b5d           sbis usr,udre
0000c8 cffe           rjmp putchar0
0000c9 81e8           ld   r30,y
0000ca b9ec           out  udr,r30
                 _0x2080001:
0000cb 9621      	ADIW R28,1
0000cc 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
0000cd d366      	RCALL SUBOPT_0x4
0000ce 81aa      	LDD  R26,Y+2
0000cf dff6      	RCALL _putchar
0000d0 81a8      	LD   R26,Y
0000d1 81b9      	LDD  R27,Y+1
0000d2 91ed      	LD   R30,X+
0000d3 91fd      	LD   R31,X+
0000d4 9631      	ADIW R30,1
0000d5 93fe      	ST   -X,R31
0000d6 93ee      	ST   -X,R30
0000d7 9623      	ADIW R28,3
0000d8 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0000d9 d35a      	RCALL SUBOPT_0x4
0000da 972c      	SBIW R28,12
0000db d405      	RCALL __SAVELOCR6
0000dc e010      	LDI  R17,0
0000dd 89aa      	LDD  R26,Y+18
0000de 89bb      	LDD  R27,Y+18+1
0000df e0e0      	LDI  R30,LOW(0)
0000e0 e0f0      	LDI  R31,HIGH(0)
0000e1 93ed      	ST   X+,R30
0000e2 93fc      	ST   X,R31
                 _0x2000016:
0000e3 8de8      	LDD  R30,Y+24
0000e4 8df9      	LDD  R31,Y+24+1
0000e5 9631      	ADIW R30,1
0000e6 8fe8      	STD  Y+24,R30
0000e7 8ff9      	STD  Y+24+1,R31
0000e8 9731      	SBIW R30,1
0000e9 91e4      	LPM  R30,Z
0000ea 2f2e      	MOV  R18,R30
0000eb 30e0      	CPI  R30,0
0000ec f409      	BRNE PC+2
0000ed c169      	RJMP _0x2000018
0000ee 2fe1      	MOV  R30,R17
0000ef 30e0      	CPI  R30,0
0000f0 f431      	BRNE _0x200001C
0000f1 3225      	CPI  R18,37
0000f2 f411      	BRNE _0x200001D
0000f3 e011      	LDI  R17,LOW(1)
0000f4 c001      	RJMP _0x200001E
                 _0x200001D:
0000f5 d341      	RCALL SUBOPT_0x5
                 _0x200001E:
0000f6 c15f      	RJMP _0x200001B
                 _0x200001C:
0000f7 30e1      	CPI  R30,LOW(0x1)
0000f8 f4b9      	BRNE _0x200001F
0000f9 3225      	CPI  R18,37
0000fa f411      	BRNE _0x2000020
0000fb d33b      	RCALL SUBOPT_0x5
0000fc c158      	RJMP _0x20000E7
                 _0x2000020:
0000fd e012      	LDI  R17,LOW(2)
0000fe e0e0      	LDI  R30,LOW(0)
0000ff 8be9      	STD  Y+17,R30
000100 e000      	LDI  R16,LOW(0)
000101 322d      	CPI  R18,45
000102 f411      	BRNE _0x2000021
000103 e001      	LDI  R16,LOW(1)
000104 c151      	RJMP _0x200001B
                 _0x2000021:
000105 322b      	CPI  R18,43
000106 f419      	BRNE _0x2000022
000107 e2eb      	LDI  R30,LOW(43)
000108 8be9      	STD  Y+17,R30
000109 c14c      	RJMP _0x200001B
                 _0x2000022:
00010a 3220      	CPI  R18,32
00010b f419      	BRNE _0x2000023
00010c e2e0      	LDI  R30,LOW(32)
00010d 8be9      	STD  Y+17,R30
00010e c147      	RJMP _0x200001B
                 _0x2000023:
00010f c002      	RJMP _0x2000024
                 _0x200001F:
000110 30e2      	CPI  R30,LOW(0x2)
000111 f439      	BRNE _0x2000025
                 _0x2000024:
000112 e050      	LDI  R21,LOW(0)
000113 e013      	LDI  R17,LOW(3)
000114 3320      	CPI  R18,48
000115 f411      	BRNE _0x2000026
000116 6800      	ORI  R16,LOW(128)
000117 c13e      	RJMP _0x200001B
                 _0x2000026:
000118 c002      	RJMP _0x2000027
                 _0x2000025:
000119 30e3      	CPI  R30,LOW(0x3)
00011a f491      	BRNE _0x2000028
                 _0x2000027:
00011b 3320      	CPI  R18,48
00011c f010      	BRLO _0x200002A
00011d 332a      	CPI  R18,58
00011e f008      	BRLO _0x200002B
                 _0x200002A:
00011f c007      	RJMP _0x2000029
                 _0x200002B:
000120 e0aa      	LDI  R26,LOW(10)
000121 9f5a      	MUL  R21,R26
000122 2d50      	MOV  R21,R0
000123 2fe2      	MOV  R30,R18
000124 53e0      	SUBI R30,LOW(48)
000125 0f5e      	ADD  R21,R30
000126 c12f      	RJMP _0x200001B
                 _0x2000029:
000127 e040      	LDI  R20,LOW(0)
000128 322e      	CPI  R18,46
000129 f411      	BRNE _0x200002C
00012a e014      	LDI  R17,LOW(4)
00012b c12a      	RJMP _0x200001B
                 _0x200002C:
00012c c00e      	RJMP _0x200002D
                 _0x2000028:
00012d 30e4      	CPI  R30,LOW(0x4)
00012e f491      	BRNE _0x200002F
00012f 3320      	CPI  R18,48
000130 f010      	BRLO _0x2000031
000131 332a      	CPI  R18,58
000132 f008      	BRLO _0x2000032
                 _0x2000031:
000133 c007      	RJMP _0x2000030
                 _0x2000032:
000134 e0aa      	LDI  R26,LOW(10)
000135 9f4a      	MUL  R20,R26
000136 2d40      	MOV  R20,R0
000137 2fe2      	MOV  R30,R18
000138 53e0      	SUBI R30,LOW(48)
000139 0f4e      	ADD  R20,R30
00013a c11b      	RJMP _0x200001B
                 _0x2000030:
                 _0x200002D:
00013b 362c      	CPI  R18,108
00013c f419      	BRNE _0x2000033
00013d 6002      	ORI  R16,LOW(2)
00013e e015      	LDI  R17,LOW(5)
00013f c116      	RJMP _0x200001B
                 _0x2000033:
000140 c003      	RJMP _0x2000034
                 _0x200002F:
000141 30e5      	CPI  R30,LOW(0x5)
000142 f009      	BREQ PC+2
000143 c112      	RJMP _0x200001B
                 _0x2000034:
000144 2fe2      	MOV  R30,R18
000145 36e3      	CPI  R30,LOW(0x63)
000146 f439      	BRNE _0x2000039
000147 d2f6      	RCALL SUBOPT_0x6
000148 d2f8      	RCALL SUBOPT_0x7
000149 d2f4      	RCALL SUBOPT_0x6
00014a 81a4      	LDD  R26,Z+4
00014b 93aa      	ST   -Y,R26
00014c d2f8      	RCALL SUBOPT_0x8
00014d c107      	RJMP _0x200003A
                 _0x2000039:
00014e 37e3      	CPI  R30,LOW(0x73)
00014f f429      	BRNE _0x200003C
000150 d2fa      	RCALL SUBOPT_0x9
000151 d2fb      	RCALL SUBOPT_0xA
000152 d2bc      	RCALL _strlen
000153 2f1e      	MOV  R17,R30
000154 c007      	RJMP _0x200003D
                 _0x200003C:
000155 37e0      	CPI  R30,LOW(0x70)
000156 f489      	BRNE _0x200003F
000157 d2f3      	RCALL SUBOPT_0x9
000158 d2f4      	RCALL SUBOPT_0xA
000159 d2c0      	RCALL _strlenf
00015a 2f1e      	MOV  R17,R30
00015b 6008      	ORI  R16,LOW(8)
                 _0x200003D:
00015c 770f      	ANDI R16,LOW(127)
00015d 3040      	CPI  R20,0
00015e f011      	BREQ _0x2000041
00015f 1741      	CP   R20,R17
000160 f008      	BRLO _0x2000042
                 _0x2000041:
000161 c001      	RJMP _0x2000040
                 _0x2000042:
000162 2f14      	MOV  R17,R20
                 _0x2000040:
000163 e040      	LDI  R20,LOW(0)
000164 e0e0      	LDI  R30,LOW(0)
000165 8be8      	STD  Y+16,R30
000166 e030      	LDI  R19,LOW(0)
000167 c062      	RJMP _0x2000043
                 _0x200003F:
000168 36e4      	CPI  R30,LOW(0x64)
000169 f011      	BREQ _0x2000046
00016a 36e9      	CPI  R30,LOW(0x69)
00016b f411      	BRNE _0x2000047
                 _0x2000046:
00016c 6004      	ORI  R16,LOW(4)
00016d c002      	RJMP _0x2000048
                 _0x2000047:
00016e 37e5      	CPI  R30,LOW(0x75)
00016f f491      	BRNE _0x2000049
                 _0x2000048:
000170 e0ea      	LDI  R30,LOW(10)
000171 8be8      	STD  Y+16,R30
000172 ff01      	SBRS R16,1
000173 c007      	RJMP _0x200004A
                +
000174 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
000175 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
000176 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
000177 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
000178 d2dd      	RCALL SUBOPT_0xB
000179 e01a      	LDI  R17,LOW(10)
00017a c01f      	RJMP _0x200004B
                 _0x200004A:
                +
00017b e1e0     +LDI R30 , LOW ( 0x2710 )
00017c e2f7     +LDI R31 , HIGH ( 0x2710 )
00017d e060     +LDI R22 , BYTE3 ( 0x2710 )
00017e e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
00017f d2d6      	RCALL SUBOPT_0xB
000180 e015      	LDI  R17,LOW(5)
000181 c018      	RJMP _0x200004B
                 _0x2000049:
000182 35e8      	CPI  R30,LOW(0x58)
000183 f411      	BRNE _0x200004D
000184 6008      	ORI  R16,LOW(8)
000185 c003      	RJMP _0x200004E
                 _0x200004D:
000186 37e8      	CPI  R30,LOW(0x78)
000187 f009      	BREQ PC+2
000188 c0cc      	RJMP _0x200008C
                 _0x200004E:
000189 e1e0      	LDI  R30,LOW(16)
00018a 8be8      	STD  Y+16,R30
00018b ff01      	SBRS R16,1
00018c c007      	RJMP _0x2000050
                +
00018d e0e0     +LDI R30 , LOW ( 0x10000000 )
00018e e0f0     +LDI R31 , HIGH ( 0x10000000 )
00018f e060     +LDI R22 , BYTE3 ( 0x10000000 )
000190 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
000191 d2c4      	RCALL SUBOPT_0xB
000192 e018      	LDI  R17,LOW(8)
000193 c006      	RJMP _0x200004B
                 _0x2000050:
                +
000194 e0e0     +LDI R30 , LOW ( 0x1000 )
000195 e1f0     +LDI R31 , HIGH ( 0x1000 )
000196 e060     +LDI R22 , BYTE3 ( 0x1000 )
000197 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000198 d2bd      	RCALL SUBOPT_0xB
000199 e014      	LDI  R17,LOW(4)
                 _0x200004B:
00019a 3040      	CPI  R20,0
00019b f011      	BREQ _0x2000051
00019c 770f      	ANDI R16,LOW(127)
00019d c001      	RJMP _0x2000052
                 _0x2000051:
00019e e041      	LDI  R20,LOW(1)
                 _0x2000052:
00019f ff01      	SBRS R16,1
0001a0 c004      	RJMP _0x2000053
0001a1 d2a9      	RCALL SUBOPT_0x9
0001a2 d2b8      	RCALL SUBOPT_0xC
0001a3 d324      	RCALL __GETD1P
0001a4 c00c      	RJMP _0x20000E8
                 _0x2000053:
0001a5 ff02      	SBRS R16,2
0001a6 c005      	RJMP _0x2000055
0001a7 d2a3      	RCALL SUBOPT_0x9
0001a8 d2b2      	RCALL SUBOPT_0xC
0001a9 d31a      	RCALL __GETW1P
0001aa d2e6      	RCALL __CWD1
0001ab c005      	RJMP _0x20000E8
                 _0x2000055:
0001ac d29e      	RCALL SUBOPT_0x9
0001ad d2ad      	RCALL SUBOPT_0xC
0001ae d315      	RCALL __GETW1P
0001af 2766      	CLR  R22
0001b0 2777      	CLR  R23
                 _0x20000E8:
                +
0001b1 87ec     +STD Y + 12 , R30
0001b2 87fd     +STD Y + 12 + 1 , R31
0001b3 876e     +STD Y + 12 + 2 , R22
0001b4 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0001b5 ff02      	SBRS R16,2
0001b6 c012      	RJMP _0x2000057
0001b7 85af      	LDD  R26,Y+15
0001b8 23aa      	TST  R26
0001b9 f442      	BRPL _0x2000058
                +
0001ba 85ec     +LDD R30 , Y + 12
0001bb 85fd     +LDD R31 , Y + 12 + 1
0001bc 856e     +LDD R22 , Y + 12 + 2
0001bd 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0001be d2ca      	RCALL __ANEGD1
0001bf d29f      	RCALL SUBOPT_0xD
0001c0 e2ed      	LDI  R30,LOW(45)
0001c1 8be9      	STD  Y+17,R30
                 _0x2000058:
0001c2 89e9      	LDD  R30,Y+17
0001c3 30e0      	CPI  R30,0
0001c4 f019      	BREQ _0x2000059
0001c5 5f1f      	SUBI R17,-LOW(1)
0001c6 5f4f      	SUBI R20,-LOW(1)
0001c7 c001      	RJMP _0x200005A
                 _0x2000059:
0001c8 7f0b      	ANDI R16,LOW(251)
                 _0x200005A:
                 _0x2000057:
0001c9 2f34      	MOV  R19,R20
                 _0x2000043:
0001ca fd00      	SBRC R16,0
0001cb c013      	RJMP _0x200005B
                 _0x200005C:
0001cc 1715      	CP   R17,R21
0001cd f410      	BRSH _0x200005F
0001ce 1735      	CP   R19,R21
0001cf f008      	BRLO _0x2000060
                 _0x200005F:
0001d0 c00e      	RJMP _0x200005E
                 _0x2000060:
0001d1 ff07      	SBRS R16,7
0001d2 c008      	RJMP _0x2000061
0001d3 ff02      	SBRS R16,2
0001d4 c004      	RJMP _0x2000062
0001d5 7f0b      	ANDI R16,LOW(251)
0001d6 8929      	LDD  R18,Y+17
0001d7 5011      	SUBI R17,LOW(1)
0001d8 c001      	RJMP _0x2000063
                 _0x2000062:
0001d9 e320      	LDI  R18,LOW(48)
                 _0x2000063:
0001da c001      	RJMP _0x2000064
                 _0x2000061:
0001db e220      	LDI  R18,LOW(32)
                 _0x2000064:
0001dc d25a      	RCALL SUBOPT_0x5
0001dd 5051      	SUBI R21,LOW(1)
0001de cfed      	RJMP _0x200005C
                 _0x200005E:
                 _0x200005B:
                 _0x2000065:
0001df 1714      	CP   R17,R20
0001e0 f488      	BRSH _0x2000067
0001e1 6100      	ORI  R16,LOW(16)
0001e2 ff02      	SBRS R16,2
0001e3 c006      	RJMP _0x2000068
0001e4 d27f      	RCALL SUBOPT_0xE
0001e5 3050      	CPI  R21,0
0001e6 f009      	BREQ _0x2000069
0001e7 5051      	SUBI R21,LOW(1)
                 _0x2000069:
0001e8 5011      	SUBI R17,LOW(1)
0001e9 5041      	SUBI R20,LOW(1)
                 _0x2000068:
0001ea e3e0      	LDI  R30,LOW(48)
0001eb 93ea      	ST   -Y,R30
0001ec d258      	RCALL SUBOPT_0x8
0001ed 3050      	CPI  R21,0
0001ee f009      	BREQ _0x200006A
0001ef 5051      	SUBI R21,LOW(1)
                 _0x200006A:
0001f0 5041      	SUBI R20,LOW(1)
0001f1 cfed      	RJMP _0x2000065
                 _0x2000067:
0001f2 2f31      	MOV  R19,R17
0001f3 89e8      	LDD  R30,Y+16
0001f4 30e0      	CPI  R30,0
0001f5 f4b1      	BRNE _0x200006B
                 _0x200006C:
0001f6 3030      	CPI  R19,0
0001f7 f099      	BREQ _0x200006E
0001f8 ff03      	SBRS R16,3
0001f9 c006      	RJMP _0x200006F
0001fa 81ee      	LDD  R30,Y+6
0001fb 81ff      	LDD  R31,Y+6+1
0001fc 9125      	LPM  R18,Z+
0001fd 83ee      	STD  Y+6,R30
0001fe 83ff      	STD  Y+6+1,R31
0001ff c005      	RJMP _0x2000070
                 _0x200006F:
000200 81ae      	LDD  R26,Y+6
000201 81bf      	LDD  R27,Y+6+1
000202 912d      	LD   R18,X+
000203 83ae      	STD  Y+6,R26
000204 83bf      	STD  Y+6+1,R27
                 _0x2000070:
000205 d231      	RCALL SUBOPT_0x5
000206 3050      	CPI  R21,0
000207 f009      	BREQ _0x2000071
000208 5051      	SUBI R21,LOW(1)
                 _0x2000071:
000209 5031      	SUBI R19,LOW(1)
00020a cfeb      	RJMP _0x200006C
                 _0x200006E:
00020b c040      	RJMP _0x2000072
                 _0x200006B:
                 _0x2000074:
00020c d25b      	RCALL SUBOPT_0xF
00020d d28d      	RCALL __DIVD21U
00020e 2f2e      	MOV  R18,R30
00020f 302a      	CPI  R18,10
000210 f030      	BRLO _0x2000076
000211 ff03      	SBRS R16,3
000212 c002      	RJMP _0x2000077
000213 5c29      	SUBI R18,-LOW(55)
000214 c001      	RJMP _0x2000078
                 _0x2000077:
000215 5a29      	SUBI R18,-LOW(87)
                 _0x2000078:
000216 c001      	RJMP _0x2000079
                 _0x2000076:
000217 5d20      	SUBI R18,-LOW(48)
                 _0x2000079:
000218 fd04      	SBRC R16,4
000219 c01e      	RJMP _0x200007B
00021a 3321      	CPI  R18,49
00021b f448      	BRSH _0x200007D
00021c d254      	RCALL SUBOPT_0x10
                +
00021d 30a1     +CPI R26 , LOW ( 0x1 )
00021e e0e0     +LDI R30 , HIGH ( 0x1 )
00021f 07be     +CPC R27 , R30
000220 e0e0     +LDI R30 , BYTE3 ( 0x1 )
000221 078e     +CPC R24 , R30
000222 e0e0     +LDI R30 , BYTE4 ( 0x1 )
000223 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000224 f409      	BRNE _0x200007C
                 _0x200007D:
000225 c00b      	RJMP _0x200007F
                 _0x200007C:
000226 1743      	CP   R20,R19
000227 f440      	BRSH _0x20000E9
000228 1753      	CP   R21,R19
000229 f010      	BRLO _0x2000082
00022a ff00      	SBRS R16,0
00022b c001      	RJMP _0x2000083
                 _0x2000082:
00022c c00f      	RJMP _0x2000081
                 _0x2000083:
00022d e220      	LDI  R18,LOW(32)
00022e ff07      	SBRS R16,7
00022f c008      	RJMP _0x2000084
                 _0x20000E9:
000230 e320      	LDI  R18,LOW(48)
                 _0x200007F:
000231 6100      	ORI  R16,LOW(16)
000232 ff02      	SBRS R16,2
000233 c004      	RJMP _0x2000085
000234 d22f      	RCALL SUBOPT_0xE
000235 3050      	CPI  R21,0
000236 f009      	BREQ _0x2000086
000237 5051      	SUBI R21,LOW(1)
                 _0x2000086:
                 _0x2000085:
                 _0x2000084:
                 _0x200007B:
000238 d1fe      	RCALL SUBOPT_0x5
000239 3050      	CPI  R21,0
00023a f009      	BREQ _0x2000087
00023b 5051      	SUBI R21,LOW(1)
                 _0x2000087:
                 _0x2000081:
00023c 5031      	SUBI R19,LOW(1)
00023d d22a      	RCALL SUBOPT_0xF
00023e d281      	RCALL __MODD21U
00023f d21f      	RCALL SUBOPT_0xD
000240 89e8      	LDD  R30,Y+16
000241 d22f      	RCALL SUBOPT_0x10
000242 d1e6      	RCALL SUBOPT_0x1
000243 d257      	RCALL __DIVD21U
000244 d211      	RCALL SUBOPT_0xB
                +
000245 85e8     +LDD R30 , Y + 8
000246 85f9     +LDD R31 , Y + 8 + 1
000247 856a     +LDD R22 , Y + 8 + 2
000248 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000249 d293      	RCALL __CPD10
00024a f009      	BREQ _0x2000075
00024b cfc0      	RJMP _0x2000074
                 _0x2000075:
                 _0x2000072:
00024c ff00      	SBRS R16,0
00024d c007      	RJMP _0x2000088
                 _0x2000089:
00024e 3050      	CPI  R21,0
00024f f029      	BREQ _0x200008B
000250 5051      	SUBI R21,LOW(1)
000251 e2e0      	LDI  R30,LOW(32)
000252 93ea      	ST   -Y,R30
000253 d1f1      	RCALL SUBOPT_0x8
000254 cff9      	RJMP _0x2000089
                 _0x200008B:
                 _0x2000088:
                 _0x200008C:
                 _0x200003A:
                 _0x20000E7:
000255 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000256 ce8c      	RJMP _0x2000016
                 _0x2000018:
000257 89aa      	LDD  R26,Y+18
000258 89bb      	LDD  R27,Y+18+1
000259 d26a      	RCALL __GETW1P
00025a d28d      	RCALL __LOADLOCR6
00025b 966a      	ADIW R28,26
00025c 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00025d 92ff      	PUSH R15
00025e 2ef8      	MOV  R15,R24
00025f 9726      	SBIW R28,6
000260 d284      	RCALL __SAVELOCR2
000261 01de      	MOVW R26,R28
000262 9614      	ADIW R26,4
000263 d21c      	RCALL __ADDW2R15
000264 018d      	MOVW R16,R26
000265 e0e0      	LDI  R30,LOW(0)
000266 83ec      	STD  Y+4,R30
000267 83ed      	STD  Y+4+1,R30
000268 83ee      	STD  Y+6,R30
000269 83ef      	STD  Y+6+1,R30
00026a 01de      	MOVW R26,R28
00026b 9618      	ADIW R26,8
00026c d213      	RCALL __ADDW2R15
00026d d256      	RCALL __GETW1P
00026e d1b7      	RCALL SUBOPT_0x0
00026f 931a      	ST   -Y,R17
000270 930a      	ST   -Y,R16
000271 eced      	LDI  R30,LOW(_put_usart_G100)
000272 e0f0      	LDI  R31,HIGH(_put_usart_G100)
000273 d1b2      	RCALL SUBOPT_0x0
000274 01de      	MOVW R26,R28
000275 9618      	ADIW R26,8
000276 de62      	RCALL __print_G100
000277 d274      	RCALL __LOADLOCR2
000278 9628      	ADIW R28,8
000279 90ff      	POP  R15
00027a 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_slave_init:
                 ; .FSTART _twi_slave_init
00027b d1b8      	RCALL SUBOPT_0x4
00027c 9468      	SET
00027d f822      	BLD  R2,2
00027e e0e7      	LDI  R30,LOW(7)
00027f 93e0 0162 	STS  _twi_result,R30
000281 81ef      	LDD  R30,Y+7
000282 85f8      	LDD  R31,Y+7+1
000283 93e0 0170 	STS  _twi_rx_buffer_G101,R30
000285 93f0 0171 	STS  _twi_rx_buffer_G101+1,R31
000287 81ee      	LDD  R30,Y+6
000288 93e0 0173 	STS  _twi_rx_buffer_size_G101,R30
00028a 81ec      	LDD  R30,Y+4
00028b 81fd      	LDD  R31,Y+4+1
00028c 93e0 016d 	STS  _twi_tx_buffer_G101,R30
00028e 93f0 016e 	STS  _twi_tx_buffer_G101+1,R31
000290 81ea      	LDD  R30,Y+2
000291 81fb      	LDD  R31,Y+2+1
000292 93e0 0174 	STS  _twi_slave_rx_handler_G101,R30
000294 93f0 0175 	STS  _twi_slave_rx_handler_G101+1,R31
000296 81e8      	LD   R30,Y
000297 81f9      	LDD  R31,Y+1
000298 93e0 0176 	STS  _twi_slave_tx_handler_G101,R30
00029a 93f0 0177 	STS  _twi_slave_tx_handler_G101+1,R31
00029c 9aac      	SBI  0x15,4
00029d 9aad      	SBI  0x15,5
00029e 85ea      	LDD  R30,Y+10
00029f 30e0      	CPI  R30,0
0002a0 f011      	BREQ _0x2020012
0002a1 e0e1      	LDI  R30,LOW(1)
0002a2 c002      	RJMP _0x2020066
                 _0x2020012:
0002a3 85e9      	LDD  R30,Y+9
0002a4 0fee      	LSL  R30
                 _0x2020066:
0002a5 b9e2      	OUT  0x2,R30
0002a6 b7e6      	IN   R30,0x36
0002a7 78e0      	ANDI R30,LOW(0x80)
0002a8 64e5      	ORI  R30,LOW(0x45)
0002a9 bfe6      	OUT  0x36,R30
0002aa 962b      	ADIW R28,11
0002ab 9508      	RET
                 ; .FEND
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
0002ac 920a      	ST   -Y,R0
0002ad 921a      	ST   -Y,R1
0002ae 92fa      	ST   -Y,R15
0002af 936a      	ST   -Y,R22
0002b0 937a      	ST   -Y,R23
0002b1 938a      	ST   -Y,R24
0002b2 939a      	ST   -Y,R25
0002b3 93aa      	ST   -Y,R26
0002b4 93ba      	ST   -Y,R27
0002b5 93ea      	ST   -Y,R30
0002b6 93fa      	ST   -Y,R31
0002b7 b7ef      	IN   R30,SREG
0002b8 93ea      	ST   -Y,R30
0002b9 d227      	RCALL __SAVELOCR6
0002ba 9110 0161 	LDS  R17,_twi_rx_index
0002bc 9100 0160 	LDS  R16,_twi_tx_index
0002be 9130 016f 	LDS  R19,_bytes_to_tx_G101
0002c0 9120 0162 	LDS  R18,_twi_result
0002c2 2fe1      	MOV  R30,R17
0002c3 91a0 0170 	LDS  R26,_twi_rx_buffer_G101
0002c5 91b0 0171 	LDS  R27,_twi_rx_buffer_G101+1
0002c7 e0f0      	LDI  R31,0
0002c8 0fea      	ADD  R30,R26
0002c9 1ffb      	ADC  R31,R27
0002ca 01af      	MOVW R20,R30
0002cb b1e1      	IN   R30,0x1
0002cc 7fe8      	ANDI R30,LOW(0xF8)
0002cd 30e8      	CPI  R30,LOW(0x8)
0002ce f411      	BRNE _0x2020017
0002cf e020      	LDI  R18,LOW(0)
0002d0 c002      	RJMP _0x2020018
                 _0x2020017:
0002d1 31e0      	CPI  R30,LOW(0x10)
0002d2 f419      	BRNE _0x2020019
                 _0x2020018:
0002d3 91e0 016c 	LDS  R30,_slave_address_G101
0002d5 c010      	RJMP _0x2020067
                 _0x2020019:
0002d6 31e8      	CPI  R30,LOW(0x18)
0002d7 f011      	BREQ _0x202001D
0002d8 32e8      	CPI  R30,LOW(0x28)
0002d9 f521      	BRNE _0x202001E
                 _0x202001D:
0002da 1703      	CP   R16,R19
0002db f480      	BRSH _0x202001F
0002dc 2fe0      	MOV  R30,R16
0002dd 5f0f      	SUBI R16,-1
0002de 91a0 016d 	LDS  R26,_twi_tx_buffer_G101
0002e0 91b0 016e 	LDS  R27,_twi_tx_buffer_G101+1
0002e2 e0f0      	LDI  R31,0
0002e3 0fae      	ADD  R26,R30
0002e4 1fbf      	ADC  R27,R31
0002e5 91ec      	LD   R30,X
                 _0x2020067:
0002e6 b9e3      	OUT  0x3,R30
0002e7 b7e6      	IN   R30,0x36
0002e8 70ef      	ANDI R30,LOW(0xF)
0002e9 68e0      	ORI  R30,0x80
0002ea bfe6      	OUT  0x36,R30
0002eb c011      	RJMP _0x2020020
                 _0x202001F:
0002ec 91e0 0172 	LDS  R30,_bytes_to_rx_G101
0002ee 171e      	CP   R17,R30
0002ef f460      	BRSH _0x2020021
0002f0 91e0 016c 	LDS  R30,_slave_address_G101
0002f2 60e1      	ORI  R30,1
0002f3 93e0 016c 	STS  _slave_address_G101,R30
0002f5 94e8      	CLT
0002f6 f821      	BLD  R2,1
0002f7 b7e6      	IN   R30,0x36
0002f8 70ef      	ANDI R30,LOW(0xF)
0002f9 6ae0      	ORI  R30,LOW(0xA0)
0002fa bfe6      	OUT  0x36,R30
0002fb c0fb      	RJMP _0x2020016
                 _0x2020021:
0002fc c033      	RJMP _0x2020022
                 _0x2020020:
0002fd c0f9      	RJMP _0x2020016
                 _0x202001E:
0002fe 35e0      	CPI  R30,LOW(0x50)
0002ff f429      	BRNE _0x2020023
000300 b1e3      	IN   R30,0x3
000301 01da      	MOVW R26,R20
000302 93ec      	ST   X,R30
000303 5f1f      	SUBI R17,-LOW(1)
000304 c002      	RJMP _0x2020024
                 _0x2020023:
000305 34e0      	CPI  R30,LOW(0x40)
000306 f471      	BRNE _0x2020025
                 _0x2020024:
000307 91e0 0172 	LDS  R30,_bytes_to_rx_G101
000309 50e1      	SUBI R30,LOW(1)
00030a 171e      	CP   R17,R30
00030b f020      	BRLO _0x2020026
00030c b7e6      	IN   R30,0x36
00030d 70ef      	ANDI R30,LOW(0xF)
00030e 68e0      	ORI  R30,0x80
00030f c003      	RJMP _0x2020068
                 _0x2020026:
000310 b7e6      	IN   R30,0x36
000311 70ef      	ANDI R30,LOW(0xF)
000312 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2020068:
000313 bfe6      	OUT  0x36,R30
000314 c0e2      	RJMP _0x2020016
                 _0x2020025:
000315 35e8      	CPI  R30,LOW(0x58)
000316 f429      	BRNE _0x2020028
000317 b1e3      	IN   R30,0x3
000318 01da      	MOVW R26,R20
000319 93ec      	ST   X,R30
00031a 5f1f      	SUBI R17,-LOW(1)
00031b c002      	RJMP _0x2020029
                 _0x2020028:
00031c 32e0      	CPI  R30,LOW(0x20)
00031d f409      	BRNE _0x202002A
                 _0x2020029:
00031e c002      	RJMP _0x202002B
                 _0x202002A:
00031f 33e0      	CPI  R30,LOW(0x30)
000320 f409      	BRNE _0x202002C
                 _0x202002B:
000321 c002      	RJMP _0x202002D
                 _0x202002C:
000322 34e8      	CPI  R30,LOW(0x48)
000323 f469      	BRNE _0x202002E
                 _0x202002D:
000324 3020      	CPI  R18,0
000325 f451      	BRNE _0x202002F
000326 fe21      	SBRS R2,1
000327 c003      	RJMP _0x2020030
000328 1703      	CP   R16,R19
000329 f028      	BRLO _0x2020032
00032a c005      	RJMP _0x2020033
                 _0x2020030:
00032b 91e0 0172 	LDS  R30,_bytes_to_rx_G101
00032d 171e      	CP   R17,R30
00032e f408      	BRSH _0x2020034
                 _0x2020032:
00032f e024      	LDI  R18,LOW(4)
                 _0x2020034:
                 _0x2020033:
                 _0x202002F:
                 _0x2020022:
000330 c0c0      	RJMP _0x2020069
                 _0x202002E:
000331 33e8      	CPI  R30,LOW(0x38)
000332 f429      	BRNE _0x2020037
000333 e022      	LDI  R18,LOW(2)
000334 b7e6      	IN   R30,0x36
000335 70ef      	ANDI R30,LOW(0xF)
000336 68e0      	ORI  R30,0x80
000337 c0bc      	RJMP _0x202006A
                 _0x2020037:
000338 36e8      	CPI  R30,LOW(0x68)
000339 f011      	BREQ _0x202003A
00033a 37e8      	CPI  R30,LOW(0x78)
00033b f411      	BRNE _0x202003B
                 _0x202003A:
00033c e022      	LDI  R18,LOW(2)
00033d c005      	RJMP _0x202003C
                 _0x202003B:
00033e 36e0      	CPI  R30,LOW(0x60)
00033f f011      	BREQ _0x202003F
000340 37e0      	CPI  R30,LOW(0x70)
000341 f491      	BRNE _0x2020040
                 _0x202003F:
000342 e020      	LDI  R18,LOW(0)
                 _0x202003C:
000343 e010      	LDI  R17,LOW(0)
000344 94e8      	CLT
000345 f821      	BLD  R2,1
000346 91e0 0173 	LDS  R30,_twi_rx_buffer_size_G101
000348 30e0      	CPI  R30,0
000349 f429      	BRNE _0x2020041
00034a e021      	LDI  R18,LOW(1)
00034b b7e6      	IN   R30,0x36
00034c 70ef      	ANDI R30,LOW(0xF)
00034d 68e0      	ORI  R30,0x80
00034e c003      	RJMP _0x202006B
                 _0x2020041:
00034f b7e6      	IN   R30,0x36
000350 70ef      	ANDI R30,LOW(0xF)
000351 6ce0      	ORI  R30,LOW(0xC0)
                 _0x202006B:
000352 bfe6      	OUT  0x36,R30
000353 c0a3      	RJMP _0x2020016
                 _0x2020040:
000354 38e0      	CPI  R30,LOW(0x80)
000355 f011      	BREQ _0x2020044
000356 39e0      	CPI  R30,LOW(0x90)
000357 f529      	BRNE _0x2020045
                 _0x2020044:
000358 fe21      	SBRS R2,1
000359 c002      	RJMP _0x2020046
00035a e021      	LDI  R18,LOW(1)
00035b c095      	RJMP _0x2020047
                 _0x2020046:
00035c b1e3      	IN   R30,0x3
00035d 01da      	MOVW R26,R20
00035e 93ec      	ST   X,R30
00035f 5f1f      	SUBI R17,-LOW(1)
000360 91e0 0173 	LDS  R30,_twi_rx_buffer_size_G101
000362 171e      	CP   R17,R30
000363 f4b0      	BRSH _0x2020048
000364 91e0 0174 	LDS  R30,_twi_slave_rx_handler_G101
000366 91f0 0175 	LDS  R31,_twi_slave_rx_handler_G101+1
000368 9730      	SBIW R30,0
000369 f411      	BRNE _0x2020049
00036a e026      	LDI  R18,LOW(6)
00036b c085      	RJMP _0x2020047
                 _0x2020049:
00036c e0a0      	LDI  R26,LOW(0)
                +
00036d 91e0 0174+LDS R30 , _twi_slave_rx_handler_G101 + ( 0 )
00036f 91f0 0175+LDS R31 , _twi_slave_rx_handler_G101 + ( 0 ) + 1
000371 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G101,0
000372 30e0      	CPI  R30,0
000373 f029      	BREQ _0x202004A
000374 b7e6      	IN   R30,0x36
000375 70ef      	ANDI R30,LOW(0xF)
000376 6ce0      	ORI  R30,LOW(0xC0)
000377 bfe6      	OUT  0x36,R30
000378 c07e      	RJMP _0x2020016
                 _0x202004A:
000379 c002      	RJMP _0x202004B
                 _0x2020048:
00037a 9468      	SET
00037b f821      	BLD  R2,1
                 _0x202004B:
00037c c002      	RJMP _0x202004C
                 _0x2020045:
00037d 38e8      	CPI  R30,LOW(0x88)
00037e f409      	BRNE _0x202004D
                 _0x202004C:
00037f c002      	RJMP _0x202004E
                 _0x202004D:
000380 39e8      	CPI  R30,LOW(0x98)
000381 f429      	BRNE _0x202004F
                 _0x202004E:
000382 b7e6      	IN   R30,0x36
000383 70ef      	ANDI R30,LOW(0xF)
000384 68e0      	ORI  R30,0x80
000385 bfe6      	OUT  0x36,R30
000386 c070      	RJMP _0x2020016
                 _0x202004F:
000387 3ae0      	CPI  R30,LOW(0xA0)
000388 f4a9      	BRNE _0x2020050
000389 b7e6      	IN   R30,0x36
00038a 70ef      	ANDI R30,LOW(0xF)
00038b 6ce0      	ORI  R30,LOW(0xC0)
00038c bfe6      	OUT  0x36,R30
00038d 9468      	SET
00038e f822      	BLD  R2,2
00038f 91e0 0174 	LDS  R30,_twi_slave_rx_handler_G101
000391 91f0 0175 	LDS  R31,_twi_slave_rx_handler_G101+1
000393 9730      	SBIW R30,0
000394 f039      	BREQ _0x2020051
000395 e0a1      	LDI  R26,LOW(1)
                +
000396 91e0 0174+LDS R30 , _twi_slave_rx_handler_G101 + ( 0 )
000398 91f0 0175+LDS R31 , _twi_slave_rx_handler_G101 + ( 0 ) + 1
00039a 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G101,0
00039b c001      	RJMP _0x2020052
                 _0x2020051:
00039c e026      	LDI  R18,LOW(6)
                 _0x2020052:
00039d c059      	RJMP _0x2020016
                 _0x2020050:
00039e 3be0      	CPI  R30,LOW(0xB0)
00039f f411      	BRNE _0x2020053
0003a0 e022      	LDI  R18,LOW(2)
0003a1 c002      	RJMP _0x2020054
                 _0x2020053:
0003a2 3ae8      	CPI  R30,LOW(0xA8)
0003a3 f4b9      	BRNE _0x2020055
                 _0x2020054:
0003a4 91e0 0176 	LDS  R30,_twi_slave_tx_handler_G101
0003a6 91f0 0177 	LDS  R31,_twi_slave_tx_handler_G101+1
0003a8 9730      	SBIW R30,0
0003a9 f059      	BREQ _0x2020056
0003aa e0a0      	LDI  R26,LOW(0)
                +
0003ab 91e0 0176+LDS R30 , _twi_slave_tx_handler_G101 + ( 0 )
0003ad 91f0 0177+LDS R31 , _twi_slave_tx_handler_G101 + ( 0 ) + 1
0003af 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G101,0
0003b0 2f3e      	MOV  R19,R30
0003b1 30e0      	CPI  R30,0
0003b2 f011      	BREQ _0x2020058
0003b3 e020      	LDI  R18,LOW(0)
0003b4 c002      	RJMP _0x2020059
                 _0x2020056:
                 _0x2020058:
0003b5 e026      	LDI  R18,LOW(6)
0003b6 c03a      	RJMP _0x2020047
                 _0x2020059:
0003b7 e000      	LDI  R16,LOW(0)
0003b8 94e8      	CLT
0003b9 f821      	BLD  R2,1
0003ba c002      	RJMP _0x202005A
                 _0x2020055:
0003bb 3be8      	CPI  R30,LOW(0xB8)
0003bc f4e1      	BRNE _0x202005B
                 _0x202005A:
0003bd fe21      	SBRS R2,1
0003be c002      	RJMP _0x202005C
0003bf e021      	LDI  R18,LOW(1)
0003c0 c030      	RJMP _0x2020047
                 _0x202005C:
0003c1 2fe0      	MOV  R30,R16
0003c2 5f0f      	SUBI R16,-1
0003c3 91a0 016d 	LDS  R26,_twi_tx_buffer_G101
0003c5 91b0 016e 	LDS  R27,_twi_tx_buffer_G101+1
0003c7 e0f0      	LDI  R31,0
0003c8 0fae      	ADD  R26,R30
0003c9 1fbf      	ADC  R27,R31
0003ca 91ec      	LD   R30,X
0003cb b9e3      	OUT  0x3,R30
0003cc 1703      	CP   R16,R19
0003cd f420      	BRSH _0x202005D
0003ce b7e6      	IN   R30,0x36
0003cf 70ef      	ANDI R30,LOW(0xF)
0003d0 6ce0      	ORI  R30,LOW(0xC0)
0003d1 c005      	RJMP _0x202006C
                 _0x202005D:
0003d2 9468      	SET
0003d3 f821      	BLD  R2,1
0003d4 b7e6      	IN   R30,0x36
0003d5 70ef      	ANDI R30,LOW(0xF)
0003d6 68e0      	ORI  R30,0x80
                 _0x202006C:
0003d7 bfe6      	OUT  0x36,R30
0003d8 c01e      	RJMP _0x2020016
                 _0x202005B:
0003d9 3ce0      	CPI  R30,LOW(0xC0)
0003da f011      	BREQ _0x2020060
0003db 3ce8      	CPI  R30,LOW(0xC8)
0003dc f489      	BRNE _0x2020061
                 _0x2020060:
0003dd b7e6      	IN   R30,0x36
0003de 70ef      	ANDI R30,LOW(0xF)
0003df 6ce0      	ORI  R30,LOW(0xC0)
0003e0 bfe6      	OUT  0x36,R30
0003e1 91e0 0176 	LDS  R30,_twi_slave_tx_handler_G101
0003e3 91f0 0177 	LDS  R31,_twi_slave_tx_handler_G101+1
0003e5 9730      	SBIW R30,0
0003e6 f031      	BREQ _0x2020062
0003e7 e0a1      	LDI  R26,LOW(1)
                +
0003e8 91e0 0176+LDS R30 , _twi_slave_tx_handler_G101 + ( 0 )
0003ea 91f0 0177+LDS R31 , _twi_slave_tx_handler_G101 + ( 0 ) + 1
0003ec 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G101,0
                 _0x2020062:
0003ed c007      	RJMP _0x2020035
                 _0x2020061:
0003ee 30e0      	CPI  R30,0
0003ef f439      	BRNE _0x2020016
0003f0 e023      	LDI  R18,LOW(3)
                 _0x2020047:
                 _0x2020069:
0003f1 b7e6      	IN   R30,0x36
0003f2 70ef      	ANDI R30,LOW(0xF)
0003f3 6de0      	ORI  R30,LOW(0xD0)
                 _0x202006A:
0003f4 bfe6      	OUT  0x36,R30
                 _0x2020035:
0003f5 9468      	SET
0003f6 f822      	BLD  R2,2
                 _0x2020016:
0003f7 9310 0161 	STS  _twi_rx_index,R17
0003f9 9300 0160 	STS  _twi_tx_index,R16
0003fb 9320 0162 	STS  _twi_result,R18
0003fd 9330 016f 	STS  _bytes_to_tx_G101,R19
0003ff d0e8      	RCALL __LOADLOCR6
000400 9626      	ADIW R28,6
000401 91e9      	LD   R30,Y+
000402 bfef      	OUT  SREG,R30
000403 91f9      	LD   R31,Y+
000404 91e9      	LD   R30,Y+
000405 91b9      	LD   R27,Y+
000406 91a9      	LD   R26,Y+
000407 9199      	LD   R25,Y+
000408 9189      	LD   R24,Y+
000409 9179      	LD   R23,Y+
00040a 9169      	LD   R22,Y+
00040b 90f9      	LD   R15,Y+
00040c 9019      	LD   R1,Y+
00040d 9009      	LD   R0,Y+
00040e 9518      	RETI
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00040f d024      	RCALL SUBOPT_0x4
000410 91a9          ld   r26,y+
000411 91b9          ld   r27,y+
000412 27ee          clr  r30
000413 27ff          clr  r31
                 strlen0:
000414 916d          ld   r22,x+
000415 2366          tst  r22
000416 f011          breq strlen1
000417 9631          adiw r30,1
000418 cffb          rjmp strlen0
                 strlen1:
000419 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00041a d019      	RCALL SUBOPT_0x4
00041b 27aa          clr  r26
00041c 27bb          clr  r27
00041d 91e9          ld   r30,y+
00041e 91f9          ld   r31,y+
                 strlenf0:
00041f 9005      	lpm  r0,z+
000420 2000          tst  r0
000421 f011          breq strlenf1
000422 9611          adiw r26,1
000423 cffb          rjmp strlenf0
                 strlenf1:
000424 01fd          movw r30,r26
000425 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _twi_tx_index:
000160           	.BYTE 0x1
                 _twi_rx_index:
000161           	.BYTE 0x1
                 _twi_result:
000162           	.BYTE 0x1
                 _twi_rx_buffer:
000163           	.BYTE 0x8
                 _twi_tx_buffer:
00016b           	.BYTE 0x1
                 _slave_address_G101:
00016c           	.BYTE 0x1
                 _twi_tx_buffer_G101:
00016d           	.BYTE 0x2
                 _bytes_to_tx_G101:
00016f           	.BYTE 0x1
                 _twi_rx_buffer_G101:
000170           	.BYTE 0x2
                 _bytes_to_rx_G101:
000172           	.BYTE 0x1
                 _twi_rx_buffer_size_G101:
000173           	.BYTE 0x1
                 _twi_slave_rx_handler_G101:
000174           	.BYTE 0x2
                 _twi_slave_tx_handler_G101:
000176           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000426 93fa      	ST   -Y,R31
000427 93ea      	ST   -Y,R30
000428 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000429 27ff      	CLR  R31
00042a 2766      	CLR  R22
00042b 2777      	CLR  R23
00042c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00042d d0aa      	RCALL __PUTPARD1
00042e e084      	LDI  R24,4
00042f de2d      	RCALL _printf
000430 9626      	ADIW R28,6
000431 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000432 d0a0      	RCALL __PUTD1S0
000433 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000434 93ba      	ST   -Y,R27
000435 93aa      	ST   -Y,R26
000436 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
000437 932a      	ST   -Y,R18
000438 89ab      	LDD  R26,Y+19
000439 89bc      	LDD  R27,Y+19+1
00043a 89ed      	LDD  R30,Y+21
00043b 89fe      	LDD  R31,Y+21+1
00043c 9509      	ICALL
00043d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00043e 89ee      	LDD  R30,Y+22
00043f 89ff      	LDD  R31,Y+22+1
000440 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
000441 9734      	SBIW R30,4
000442 8bee      	STD  Y+22,R30
000443 8bff      	STD  Y+22+1,R31
000444 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x8:
000445 89ab      	LDD  R26,Y+19
000446 89bc      	LDD  R27,Y+19+1
000447 89ed      	LDD  R30,Y+21
000448 89fe      	LDD  R31,Y+21+1
000449 9509      	ICALL
00044a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00044b dff2      	RCALL SUBOPT_0x6
00044c cff4      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
00044d 89ae      	LDD  R26,Y+22
00044e 89bf      	LDD  R27,Y+22+1
00044f 9614      	ADIW R26,4
000450 d073      	RCALL __GETW1P
000451 83ee      	STD  Y+6,R30
000452 83ff      	STD  Y+6+1,R31
000453 81ae      	LDD  R26,Y+6
000454 81bf      	LDD  R27,Y+6+1
000455 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xB:
                +
000456 87e8     +STD Y + 8 , R30
000457 87f9     +STD Y + 8 + 1 , R31
000458 876a     +STD Y + 8 + 2 , R22
000459 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
00045a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
00045b 89ae      	LDD  R26,Y+22
00045c 89bf      	LDD  R27,Y+22+1
00045d 9614      	ADIW R26,4
00045e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
00045f 87ec     +STD Y + 12 , R30
000460 87fd     +STD Y + 12 + 1 , R31
000461 876e     +STD Y + 12 + 2 , R22
000462 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000463 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000464 7f0b      	ANDI R16,LOW(251)
000465 89e9      	LDD  R30,Y+17
000466 93ea      	ST   -Y,R30
000467 cfdd      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
                +
000468 85e8     +LDD R30 , Y + 8
000469 85f9     +LDD R31 , Y + 8 + 1
00046a 856a     +LDD R22 , Y + 8 + 2
00046b 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
00046c 85ac     +LDD R26 , Y + 12
00046d 85bd     +LDD R27 , Y + 12 + 1
00046e 858e     +LDD R24 , Y + 12 + 2
00046f 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000470 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
000471 85a8     +LDD R26 , Y + 8
000472 85b9     +LDD R27 , Y + 8 + 1
000473 858a     +LDD R24 , Y + 8 + 2
000474 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000475 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000476 9610      	adiw r26,0
000477 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000478 ed80     +LDI R24 , LOW ( 0x7D0 )
000479 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00047a 9701     +SBIW R24 , 1
00047b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00047c 95a8      	wdr
00047d 9711      	sbiw r26,1
00047e f7c9      	brne __delay_ms0
                 __delay_ms1:
00047f 9508      	ret
                 
                 __ADDW2R15:
000480 2400      	CLR  R0
000481 0daf      	ADD  R26,R15
000482 1db0      	ADC  R27,R0
000483 9508      	RET
                 
                 __ORD12:
000484 2bea      	OR   R30,R26
000485 2bfb      	OR   R31,R27
000486 2b68      	OR   R22,R24
000487 2b79      	OR   R23,R25
000488 9508      	RET
                 
                 __ANEGD1:
000489 95f0      	COM  R31
00048a 9560      	COM  R22
00048b 9570      	COM  R23
00048c 95e1      	NEG  R30
00048d 4fff      	SBCI R31,-1
00048e 4f6f      	SBCI R22,-1
00048f 4f7f      	SBCI R23,-1
000490 9508      	RET
                 
                 __CWD1:
000491 2f6f      	MOV  R22,R31
000492 0f66      	ADD  R22,R22
000493 0b66      	SBC  R22,R22
000494 2f76      	MOV  R23,R22
000495 9508      	RET
                 
                 __LTB12U:
000496 17ae      	CP   R26,R30
000497 e0e1      	LDI  R30,1
000498 f008      	BRLO __LTB12U1
000499 27ee      	CLR  R30
                 __LTB12U1:
00049a 9508      	RET
                 
                 __DIVD21U:
00049b 933f      	PUSH R19
00049c 934f      	PUSH R20
00049d 935f      	PUSH R21
00049e 2400      	CLR  R0
00049f 2411      	CLR  R1
0004a0 2744      	CLR  R20
0004a1 2755      	CLR  R21
0004a2 e230      	LDI  R19,32
                 __DIVD21U1:
0004a3 0faa      	LSL  R26
0004a4 1fbb      	ROL  R27
0004a5 1f88      	ROL  R24
0004a6 1f99      	ROL  R25
0004a7 1c00      	ROL  R0
0004a8 1c11      	ROL  R1
0004a9 1f44      	ROL  R20
0004aa 1f55      	ROL  R21
0004ab 1a0e      	SUB  R0,R30
0004ac 0a1f      	SBC  R1,R31
0004ad 0b46      	SBC  R20,R22
0004ae 0b57      	SBC  R21,R23
0004af f428      	BRCC __DIVD21U2
0004b0 0e0e      	ADD  R0,R30
0004b1 1e1f      	ADC  R1,R31
0004b2 1f46      	ADC  R20,R22
0004b3 1f57      	ADC  R21,R23
0004b4 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0004b5 60a1      	SBR  R26,1
                 __DIVD21U3:
0004b6 953a      	DEC  R19
0004b7 f759      	BRNE __DIVD21U1
0004b8 01fd      	MOVW R30,R26
0004b9 01bc      	MOVW R22,R24
0004ba 01d0      	MOVW R26,R0
0004bb 01ca      	MOVW R24,R20
0004bc 915f      	POP  R21
0004bd 914f      	POP  R20
0004be 913f      	POP  R19
0004bf 9508      	RET
                 
                 __MODD21U:
0004c0 dfda      	RCALL __DIVD21U
0004c1 01fd      	MOVW R30,R26
0004c2 01bc      	MOVW R22,R24
0004c3 9508      	RET
                 
                 __GETW1P:
0004c4 91ed      	LD   R30,X+
0004c5 91fc      	LD   R31,X
0004c6 9711      	SBIW R26,1
0004c7 9508      	RET
                 
                 __GETD1P:
0004c8 91ed      	LD   R30,X+
0004c9 91fd      	LD   R31,X+
0004ca 916d      	LD   R22,X+
0004cb 917c      	LD   R23,X
0004cc 9713      	SBIW R26,3
0004cd 9508      	RET
                 
                 __GETD2S0:
0004ce 81a8      	LD   R26,Y
0004cf 81b9      	LDD  R27,Y+1
0004d0 818a      	LDD  R24,Y+2
0004d1 819b      	LDD  R25,Y+3
0004d2 9508      	RET
                 
                 __PUTD1S0:
0004d3 83e8      	ST   Y,R30
0004d4 83f9      	STD  Y+1,R31
0004d5 836a      	STD  Y+2,R22
0004d6 837b      	STD  Y+3,R23
0004d7 9508      	RET
                 
                 __PUTPARD1:
0004d8 937a      	ST   -Y,R23
0004d9 936a      	ST   -Y,R22
0004da 93fa      	ST   -Y,R31
0004db 93ea      	ST   -Y,R30
0004dc 9508      	RET
                 
                 __CPD10:
0004dd 9730      	SBIW R30,0
0004de 4060      	SBCI R22,0
0004df 4070      	SBCI R23,0
0004e0 9508      	RET
                 
                 __SAVELOCR6:
0004e1 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004e2 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004e3 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004e4 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004e5 931a      	ST   -Y,R17
0004e6 930a      	ST   -Y,R16
0004e7 9508      	RET
                 
                 __LOADLOCR6:
0004e8 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004e9 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004ea 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004eb 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004ec 8119      	LDD  R17,Y+1
0004ed 8108      	LD   R16,Y
0004ee 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  17 r1 :   7 r2 :  14 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  44 r17:  36 r18:  49 r19:  21 r20:  29 r21:  28 r22:  38 r23:  27 
r24:  23 r25:  11 r26:  74 r27:  33 r28:  15 r29:   1 r30: 327 r31:  74 
x  :  22 y  : 179 z  :  11 
Registers used: 23 out of 35 (65.7%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   8 
adiw  :  18 and   :   0 andi  :  21 asr   :   0 bclr  :   0 bld   :  10 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  30 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   0 brne  :  54 brpl  :   1 brsh  :   9 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  19 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   3 cp    :  14 
cpc   :   3 cpi   :  75 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   6 ijmp  :   0 in    :  21 
inc   :   0 ld    :  35 ldd   :  77 ldi   : 138 lds   :  38 lpm   :  11 
lsl   :   2 lsr   :   0 mov   :  20 movw  :  18 mul   :   2 muls  :   0 
mulsu :   0 neg   :   1 nop   :   0 or    :   4 ori   :  23 out   :  27 
pop   :   4 push  :   4 rcall :  95 ret   :  38 reti  :   1 rjmp  : 138 
rol   :   7 ror   :   0 sbc   :   4 sbci  :   5 sbi   :   2 sbic  :   0 
sbis  :   1 sbiw  :  17 sbr   :   1 sbrc  :   3 sbrs  :  17 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   6 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  51 std   :  39 
sts   :  15 sub   :   1 subi  :  26 swap  :   0 tst   :   3 wdr   :   1 

Instructions used: 58 out of 114 (50.9%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009de   2492     34   2526    8192  30.8%
[.dseg] 0x000060 0x000178      0     24     24    1024   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
